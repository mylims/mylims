type Query {
  events(
    limit: Int
    skip: Int
    filterBy: EventFilterInput
    sortBy: EventSortInput
  ): EventPage!
  event(id: ID!): Event!
}

# Paginated list of events
enum EventSortField {
  date
  topic
  processorId
  status
  createdAt
}
input EventFilterInput {
  topic: FilterText
  processorId: String
  status: [EventStatus!]
  fileId: String
  createdAt: FilterDate
}
input EventSortInput {
  direction: SortDirection!
  field: EventSortField!
}
type EventPage implements Pagination {
  list: [Event!]!
  totalCount: Int!
}

# Enums for event fields
enum EventStatus {
  pending
  processing
  success
  error
}
enum EventDataType {
  file
}
interface EventData {
  type: EventDataType!
}

# Intermediary type for event data
type EventHistory {
  processId: String!
  status: EventStatus!
  date: DateTime!
  message: String
}

type EventFile {
  id: ID!
  name: String!
}
type EventDataFile implements EventData {
  type: EventDataType!
  fileId: String!
  file: EventFile!
}

type EventProcessor {
  processorId: String!
  history: [EventHistory!]!
}

# Main event type
type Event {
  id: ID!
  topic: String!
  data: EventData!
  createdAt: DateTime!
  processors: [EventProcessor!]!
}

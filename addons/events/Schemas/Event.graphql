type Query {
  eventsByTopic(topic: String!): [Event!]!
  eventsByFileId(fileId: String!): [Event!]!
}

enum EventStatus {
  pending
  success
  error
}

enum EventDataType {
  file
}

type EventHistory {
  status: EventStatus!
  date: DateTime!
  message: String
}

interface EventData {
  type: EventDataType!
}
type EventDataFile {
  type: EventDataType!
  fileId: String!
}

type EventProcessor {
  processorId: String!
  history: [EventHistory!]!
}

type Event {
  id: String!
  topic: String!
  data: EventData!
  processors: [EventProcessor!]!
}

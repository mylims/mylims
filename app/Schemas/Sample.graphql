type Query {
  samples(
    kind: String!
    limit: Int
    skip: Int
    filterBy: SampleFilterInput
    sortBy: SampleSortInput
  ): SamplePage!
  sample(id: ID!): Sample!
  sampleKind(id: ID!): SampleKind!
}

type Mutation {
  createSample(input: SampleInput!): Sample!
  createSamples(samples: [SampleInput!]!): [Sample!]!
  updateSample(id: ID!, input: SampleInput!): Sample!
  createSampleKind(input: SampleKindInput!): SampleKind!
  updateSampleKind(id: ID!, input: SampleKindInput!): SampleKind!
}

# Paginated list of samples
enum SampleSortField {
  username
  createdBy
  createdAt
  availability
}
input SampleFilterInput {
  sampleCode: [FilterList!]
  labels: FilterText
  project: FilterText
  title: FilterText
  comment: FilterText
  createdAt: FilterDate
  meta: [FilterMetaText!]
  userId: String
}
input SampleSortInput {
  direction: SortDirection!
  field: SampleSortField!
}
type SamplePage implements Pagination {
  list: [Sample!]!
  totalCount: Int!
  kind: SampleKind!
}
type SampleFile {
  id: ID!
  date: DateTime!
  downloadUrl: String!
  filename: String!
  size: Int!
  collection: String
}

# Inputs
input SampleInput {
  sampleCode: [String!]!
  userId: String!
  kind: String!
  labels: [String!]!
  project: String
  meta: JSON!
  title: String
  comment: String
  description: JSON
  parent: String
  attachments: [String!]!
}
input SampleKindInput {
  id: ID!
  name: String
  description: String
  color: String
  schema: JSON!
}

# Sample specific data
type Sample {
  id: ID!
  sampleCode: [String!]!
  uuid10: String!
  user: User
  kind: SampleKind!
  labels: [String!]!
  project: String
  meta: JSON!
  title: String
  comment: String
  description: JSON
  measurements: [Measurement!]!
  attachments: [SampleFile!]!
  parent: Sample
  children: [Sample!]
  createdAt: DateTime!
  availability: String
}

# Sample kind
type SampleKind {
  id: ID!
  name: String
  description: String
  color: String
  schema: JSON!
}

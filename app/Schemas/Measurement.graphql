type Query {
  measurements(
    type: MeasurementTypes!
    limit: Int
    skip: Int
    filterBy: MeasurementFilterInput
    sortBy: MeasurementSortInput
  ): MeasurementPage!
  measurement(id: ID!, type: MeasurementTypes!): Measurement!
}

type Mutation {
  createMeasurement(
    sampleId: String!
    type: MeasurementTypes!
    input: MeasurementInput!
  ): Measurement!
}

# Paginated list of measurements
enum MeasurementSortField {
  username
  createdBy
  createdAt
}
input MeasurementFilterInput {
  sampleCode: [FilterList!]
  createdAt: FilterDate
  userId: String
}
input MeasurementSortInput {
  direction: SortDirection!
  field: MeasurementSortField!
}
type MeasurementPage implements Pagination {
  list: [Measurement!]!
  totalCount: Int!
}
type MeasurementFile {
  downloadUrl: String!
  filename: String!
  size: Int!
}

# Inputs
input MeasurementInput {
  eventId: String
  userId: String!
  sampleCode: [String!]!
  createdBy: String!
  fileId: String
  comment: String
  description: JSON
  derived: JSON
}

# Measurement specific data
enum MeasurementTypes {
  transfer
}

type Measurement {
  id: ID!
  type: MeasurementTypes!
  username: String!
  user: User
  sampleCode: [String!]!
  createdBy: String
  fileId: String
  file: MeasurementFile
  eventId: String
  comment: String
  description: JSON
  createdAt: DateTime!
  derived: JSON
}
